<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <AssemblyName>CelesteTAS-EverestInterop</AssemblyName>
        <RootNamespace>TAS</RootNamespace>
        <TargetFramework>net7.0</TargetFramework>
        <LangVersion>preview</LangVersion>
        <Nullable>enable</Nullable>

        <CelestePrefix Condition="'$(CelestePrefix)' == '' And Exists('../../../Celeste.dll')">../../..</CelestePrefix>
        <CelestePrefix Condition="'$(CelestePrefix)' == ''">lib-stripped</CelestePrefix>

        <Product>CelesteTAS-EverestInterop</Product>
        <Copyright>Copyright (c) 2018 - 2024 Everest Team</Copyright>

        <!-- See https://github.com/BepInEx/BepInEx.AssemblyPublicizer/issues/5 -->
        <NoWarn>$(NoWarn);CS0436</NoWarn>

        <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    </PropertyGroup>

    <PropertyGroup>
        <PathMap>$(MSBuildProjectDirectory)=CelesteTAS/</PathMap>
    </PropertyGroup>

    <ItemGroup>
        <ProjectReference Include="..\StudioCommunication\StudioCommunication.csproj" />
    </ItemGroup>

    <ItemGroup>
        <Reference Include="$(CelestePrefix)\Celeste.dll" Private="false" Publicize="true" />
        <Reference Include="$(CelestePrefix)\FNA.dll" Private="false" Publicize="true" />
        <Reference Include="$(CelestePrefix)\MMHOOK_Celeste.dll" Private="false" />

        <Reference Include="lib-stripped\SpeedrunTool.dll" Private="false" />
        <Reference Include="lib-stripped\TASRecorder.dll" Private="false" />
        <Reference Include="lib-stripped\ExCameraDynamics.dll" Private="false" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="CelesteAnalyzer" Version="*" />

        <PackageReference Include="MonoMod.RuntimeDetour" Version="25.2.3" PrivateAssets="all" ExcludeAssets="runtime" />
        <PackageReference Include="MonoMod.Patcher" Version="25.0.0-prerelease.2" />
        <PackageReference Include="BepInEx.AssemblyPublicizer.MSBuild" Version="0.4.1" PrivateAssets="all" ExcludeAssets="runtime" />

        <PackageReference Include="SharpZipLib" Version="1.4.2" IncludeAssets="all" />
        <PackageReference Include="YamlDotNet" Version="16.1.3" PrivateAssets="all" ExcludeAssets="runtime" />

        <PackageReference Include="JetBrains.Annotations" Version="2024.2.0" />
        <PackageReference Include="JetBrains.Profiler.Api" Version="1.4.6" Condition="'$(Configuration)' == 'Debug'" />
    </ItemGroup>

    <!-- Assemblies -->
    <Target Name="CopyAssemblies" AfterTargets="Build">
        <Copy SourceFiles="$(OutputPath)$(AssemblyName).dll" DestinationFolder="..\bin" />
        <Copy SourceFiles="$(OutputPath)$(AssemblyName).pdb" DestinationFolder="..\bin" />

        <Copy SourceFiles="$(OutputPath)StudioCommunication.dll" DestinationFolder="..\bin" />
        <Copy SourceFiles="$(OutputPath)StudioCommunication.pdb" DestinationFolder="..\bin" />
        <Copy SourceFiles="$(OutputPath)MemoryPack.Core.dll" DestinationFolder="..\bin" />

        <Copy SourceFiles="$(OutputPath)ICSharpCode.SharpZipLib.dll" DestinationFolder="..\bin" />

        <Copy SourceFiles="$(OutputPath)JetBrains.Profiler.Api.dll" DestinationFolder="..\bin" Condition="'$(Configuration)' == 'Debug' or '$(EnablePerformanceProfiling)' == 'true'" />
        <Copy SourceFiles="$(OutputPath)JetBrains.HabitatDetector.dll" DestinationFolder="..\bin" Condition="'$(Configuration)' == 'Debug' or '$(EnablePerformanceProfiling)' == 'true'" />
        <Copy SourceFiles="$(OutputPath)JetBrains.FormatRipper.dll" DestinationFolder="..\bin" Condition="'$(Configuration)' == 'Debug' or '$(EnablePerformanceProfiling)' == 'true'" />
    </Target>

    <!-- Assets (use symlinks in debug builds - only on UNIX, since MSBuild is useless) -->
    <Target Name="LinkAssets" AfterTargets="Build" Condition="'$(Configuration)' == 'Debug' and '$(OS)' == 'Unix' and $(UseSymlinks) != false">
        <Copy SourceFiles="" DestinationFiles="..\bin\env.lua" UseSymboliclinksIfPossible="true" />

        <Exec Command="rm -rf ../bin/env.lua &amp;&amp; ln -s ../CelesteTAS-EverestInterop/Source/EverestInterop/Lua/env.lua ../bin/env.lua"/>

        <!-- Replace with symlinks if they aren't already -->
        <Exec Command="if [ ! -L ../everest.yaml ]; then rm -rf ../everest.yaml &amp;&amp; ln -s CelesteTAS-EverestInterop/everest.yaml ../everest.yaml; fi"/>
        <Exec Command="if [ ! -L ../Dialog ]; then rm -rf ../Dialog &amp;&amp; ln -s CelesteTAS-EverestInterop/Dialog ../Dialog; fi"/>
        <Exec Command="if [ ! -L ../Graphics ]; then rm -rf ../Graphics &amp;&amp; ln -s CelesteTAS-EverestInterop/Graphics ../Graphics; fi"/>
    </Target>
    <Target Name="CopyAssets" AfterTargets="Build" Condition="'$(Configuration)' != 'Debug' or '$(OS)' != 'Unix' or $(UseSymlinks) == false">
        <ItemGroup>
            <CelesteAssets Include="everest.yaml" />
            <CelesteAssets Include="Dialog\**\*" />
            <CelesteAssets Include="Graphics\**\*" />
        </ItemGroup>

        <!-- Clean-up potential symlinks -->
        <RemoveDir Directories="..\Dialog;..\Graphics"/>

        <Copy SourceFiles="Source\EverestInterop\Lua\env.lua" DestinationFiles="..\bin\env.lua" />
        <Copy SourceFiles="@(CelesteAssets)" DestinationFiles="..\%(Identity)"/>
    </Target>

    <Target Name="PackageMod" AfterTargets="Build" DependsOnTargets="CopyAssemblies;CopyAssets" Condition="'$(Configuration)' == 'Release'">
        <ItemGroup>
            <FilesToPackage Include="..\everest.yaml;..\bin\**\*.*;..\Dialog\**\*.*;..\Graphics\**\*.*" />
            <FilesToPackage Include="..\LICENSE;..\CHANGELOG.md;..\Assets\**\*.*" />
        </ItemGroup>
        <PackageMod Files="@(FilesToPackage)" OutputPath="..\CelesteTAS.zip" />
    </Target>

    <!-- Inline task used to create a .zip for the mod -->
    <UsingTask TaskName="PackageMod"
               TaskFactory="RoslynCodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
        <ParameterGroup>
            <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <OutputPath ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System.IO" />
            <Using Namespace="System.IO.Compression" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var projectDir = Path.Combine(@"$(ProjectDir)", ".."); // Go one level up, since we're inside the 'CelesteTAS-EverestInterop' directory
                projectDir = Uri.UnescapeDataString(projectDir);

                if (File.Exists(OutputPath))
                    File.Delete(OutputPath);

                using (ZipArchive zip = ZipFile.Open(OutputPath, ZipArchiveMode.Create))
                {
                    foreach (var file in Files)
                    {
                        string filePath = file.GetMetadata("FullPath");
                        string entryName = GetRelativePath(projectDir, filePath);

                        zip.CreateEntryFromFile(filePath, entryName);
                    }
                }

                string GetRelativePath(string fromPath, string toPath)
                {
                    if (string.IsNullOrEmpty(fromPath)) throw new ArgumentNullException(nameof(fromPath));
                    if (string.IsNullOrEmpty(toPath))   throw new ArgumentNullException(nameof(toPath));

                    Uri fromUri = new Uri(fromPath);
                    Uri toUri = new Uri(toPath);

                    if (fromUri.Scheme != toUri.Scheme) { return toPath; } // path can't be made relative.

                    Uri relativeUri = fromUri.MakeRelativeUri(toUri);
                    string relativePath = Uri.UnescapeDataString(relativeUri.ToString());

                    if (toUri.Scheme.Equals("file", StringComparison.InvariantCultureIgnoreCase))
                    {
                        relativePath = relativePath.Replace(Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar);
                    }

                    return relativePath;
                }
            ]]>
            </Code>
        </Task>
    </UsingTask>

</Project>
